{"version":3,"sources":["components/posts/PostCard.jsx","components/posts/PostDetails.jsx","components/posts/PostList.jsx","redux/constants/subreddit.constants.js","redux/constants/post.constants.js","redux/services/post.service.js","redux/services/subreddit.service.js","redux/actions/subreddit.actions.js","redux/actions/post.actions.js","components/subreddits/SubredditItem.jsx","components/subreddits/SubredditList.jsx","components/common/viewContainer/ViewContainer.jsx","components/home/Home.jsx","components/about/About.jsx","components/common/header/Header.jsx","components/common/footer/Footer.jsx","App.js","redux/reducers/postReducer.js","redux/reducers/subredditReducer.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["PostCard","props","post","activePost","console","log","className","id","onClick","onSelection","name","display_name","author","PostDetails","useState","isActive","setActive","useEffect","title","href","url","connectedPostList","connect","state","postsData","postReducer","selectedPost","setSelectedPost","length","map","p","i","key","tPost","thisPost","subredditConstants","postConstants","postService","getPosts","category","pUrl","axios","get","then","response","status","data","children","handleResponse","subredditService","getSubreddits","subredditActions","dispatch","type","payload","fetchSubredditSuccess","d","dObject","formatSubredditData","error","fetchSubredditFailure","postActions","author_fullname","selftext","imageUrl","preview","images","resolutions","domain","formatPostData","fetchPostsFailure","connectedSubRedditItem","activeCategory","connectedSubredditList","categories","subredditReducer","selectedCategory","setSelectedCategory","c","SubredditItem","tCat","ViewContainer","Home","About","alt","Header","exact","to","Footer","Date","getFullYear","App","path","component","PostList","initialState","loading","action","message","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"wUA4CeA,EA1CE,SAACC,GAAW,IACnBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,WAIdC,QAAQC,IAAI,cAAeH,GAO3B,OACE,yBACEI,UAAWH,EAAWI,KAAOL,EAAKK,GAAK,sBAAwB,WAC/DC,QAPmB,WACrBP,EAAMQ,YAAYP,KAQhB,yBAAKI,UAAU,YACb,yBAAKA,UAAU,gBACb,6BACE,wCACCJ,EAAKK,IAER,6BACE,0CACCL,EAAKQ,MAER,6BACE,iDACCR,EAAKS,cAER,6BACE,4CACCT,EAAKU,SAGV,yBAAKN,UAAU,kBCRRO,EA5BK,SAACZ,GAAW,IACtBC,EAASD,EAATC,KADqB,EAECY,oBAAS,GAFV,mBAEtBC,EAFsB,KAEZC,EAFY,KAO7B,OAJAC,qBAAU,WACRD,EAAUd,GAAQA,EAAKK,MACtB,CAACL,IAGF,yBAAKI,UAAWS,EAAW,cAAgB,QACzC,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,YAAYJ,EAAKQ,OAElC,yBAAKJ,UAAU,cACb,yCACA,yBAAKA,UAAU,QAAQJ,EAAKgB,OAC5B,iDACA,yBAAKZ,UAAU,QAAQJ,EAAKS,cAC5B,4CACA,yBAAKL,UAAU,QAAQJ,EAAKU,QAC5B,uCACA,yBAAKN,UAAU,iBACb,uBAAGa,KAAK,YAAYjB,EAAKkB,SCyBpBC,G,MADWC,aAXF,SAACC,GACvB,MAAO,CACLC,UAAWD,EAAME,YAAYD,aASPF,EAtCT,SAACrB,GAAW,IACnBuB,EAAcvB,EAAduB,UADkB,EAEcV,mBAAS,IAFvB,mBAEnBY,EAFmB,KAELC,EAFK,KAO1B,OACE,yBAAKrB,UAAU,YACb,yBAAKA,UAAU,cACZkB,GACCA,EAAUI,OAAS,GACnBJ,EAAUK,KAAI,SAACC,EAAGC,GAAJ,OACZ,kBAAC,EAAD,CACEC,IAAKD,EACL7B,KAAM4B,EACNrB,YAAa,SAACwB,GAZF,IAACC,KAY2BD,IAXtCN,EAAgBO,IAYlB/B,WAAYuB,QAKpB,kBAAC,EAAD,CAAaxB,KAAMwB,EAAcvB,WAAYuB,SC/BtCS,EACY,wBADZA,EAEc,0BAFdA,EAGc,0BCHdC,EACQ,oBADRA,EAEU,sBAFVA,EAGU,sB,iBCYhB,IAAMC,EAAc,CACzBC,SAbF,SAAkBC,GAChB,IAAIC,EAAI,gCAA4BD,EAASnB,IAArC,YACR,OAAOqB,IAAMC,IAAIF,GAAMG,MAAK,SAACC,GAAD,OAE9B,SAAwBA,GAEE,MAApBA,EAASC,QACXzC,QAAQC,IAAI,6BAEd,OAAOuC,EAASE,KAAKA,KAAKC,SAPgBC,CAAeJ,QCQpD,IAAMK,EAAmB,CAC9BC,cAXF,WACE,OAAOT,IAAMC,IAHE,6DAGYC,MAAK,SAACC,GAAD,OAElC,SAAwBA,GACE,MAApBA,EAASC,QACXzC,QAAQC,IAAI,mCAEd,OAAOuC,EAASE,KAAKA,KAAKC,SANoBC,CAAeJ,QCmCxD,IAAMO,EAAmB,CAC9BD,cAbF,WACE,OAAO,SAACE,GACNA,EA1B+B,CACjCC,KAAMlB,IA0BJc,EAAiBC,gBAAgBP,MAC/B,SAACG,GACCM,EAzBsB,SAACN,GAAD,MAAW,CACvCO,KAAMlB,EACNmB,QAAS,CAAER,SAuBIS,CAfW,SAACT,GAC3B,OAAOA,EAAKjB,KAAI,SAAC2B,GACf,IAAIC,EAAU,GAId,OAHAA,EAAQlD,GAAKiD,EAAEV,KAAKvC,GACpBkD,EAAQvC,MAAQsC,EAAEV,KAAK5B,MACvBuC,EAAQrC,IAAMoC,EAAEV,KAAK1B,IACdqC,KAS4BC,CAAoBZ,QAErD,SAACa,GAAD,OAAWP,EAtBa,SAACO,GAAD,MAAY,CACxCN,KAAMlB,EACNmB,QAAS,CAAEK,UAoBaC,CAAsBD,UCsBzC,IAAME,EAAc,CACzBvB,SAXF,SAAkBC,GAChB,OAAO,SAACa,GACNA,EA7C2B,CAC7BC,KAAMjB,IA6CJC,EAAYC,SAASC,GAAUI,MAC7B,SAACG,GAAD,OAAUM,GA3CW5B,EASJ,SAACsB,GAEtB,OAAOA,EAAKjB,KAAI,SAAC2B,GACf,IAAIC,EAAU,GACdA,EAAQlD,GAAKiD,EAAEV,KAAKvC,GACpBkD,EAAQ/C,KAAO8C,EAAEV,KAAKpC,KACtB+C,EAAQvC,MAAQsC,EAAEV,KAAK5B,MACvBuC,EAAQ7C,OAAS4C,EAAEV,KAAKlC,OACxB6C,EAAQK,gBAAkBN,EAAEV,KAAKgB,gBACjCL,EAAQM,SAAWP,EAAEV,KAAKiB,SAC1BN,EAAQrC,IAAMoC,EAAEV,KAAK1B,IAErB,IAAI4C,EACFR,EAAEV,KAAKmB,SACPT,EAAEV,KAAKmB,SACPT,EAAEV,KAAKmB,QAAQC,QACfV,EAAEV,KAAKmB,QAAQC,OAAO,IACtBV,EAAEV,KAAKmB,QAAQC,OAAO,GAAGC,YAAY,IACrCX,EAAEV,KAAKmB,QAAQC,OAAO,GAAGC,YAAY,GAAG/C,IACpCoC,EAAEV,KAAKmB,QAAQC,OAAO,GAAGC,YAAY,GAAG/C,IACxC,GAKN,OAHAqC,EAAQO,SAAWA,EACnBP,EAAQW,OAASZ,EAAEV,KAAKsB,OAEjBX,KASgCY,CAAevB,GA3ChB,CACxCO,KAAMjB,EACNkB,QAAS,CAAE9B,gBAFa,IAACA,KA4CrB,SAACmC,GAAD,OAAWP,EAvCS,SAACO,GAAD,MAAY,CACpCN,KAAMjB,EACNkB,QAAS,CAAEK,UAqCaW,CAAkBX,UCjB7BY,EADgBjD,YAAQ,MANZ,SAAC8B,GAC1B,MAAO,CACLd,SAAU,SAACC,GAAD,OAAca,EAASS,EAAYvB,SAASC,QAI3BjB,EA7BT,SAACrB,GAAW,IACxBsC,EAAoDtC,EAApDsC,SAAUD,EAA0CrC,EAA1CqC,SAAU7B,EAAgCR,EAAhCQ,YAAa+D,EAAmBvE,EAAnBuE,eAOzC,OACE,yBACElE,UACEkE,EAAejE,KAAOgC,EAAShC,GAC3B,2BACA,iBAGN,yBAAKD,UAAU,aAAaE,QAdT,WACrB8B,EAASC,GAET9B,EAAY8B,KAYPA,EAASrB,WC4BHuD,G,MAJgBnD,aAXP,SAACC,GACvB,MAAO,CACLmD,WAAYnD,EAAMoD,iBAAiBD,eAGZ,SAACtB,GAC1B,MAAO,CACLF,cAAe,kBAAME,EAASD,EAAiBD,qBAIpB5B,EArCT,SAACrB,GAAW,IACxBiD,EAA8BjD,EAA9BiD,cAAewB,EAAezE,EAAfyE,WADQ,EAEiB5D,mBAAS,IAF1B,mBAExB8D,EAFwB,KAENC,EAFM,KAS/B,OAHA5D,qBAAU,WACRiC,MACC,CAACA,IAEF,yBAAK5C,UAAU,iBACb,yBAAKA,UAAU,cACZoE,GACCA,EAAW9C,OAAS,GACpB8C,EAAW7C,KAAI,SAACiD,EAAG/C,GAAJ,OACb,kBAACgD,EAAD,CACE/C,IAAKD,EACLQ,SAAUuC,EACVN,eAAgBI,EAChBnE,YAAa,SAACuE,GAfxBH,EAeiDG,eCLtCC,G,MAjBO,WASpB,OACE,yBAAK3E,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHS4E,EAZF,SAACjF,GACZ,OACE,yBAAKK,UAAU,QACb,sDACA,4IC0DS6E,G,MA9DD,SAAClF,GACb,OACE,yBAAKK,UAAU,SACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,kBAAf,iBACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cAAf,wBACA,yBAAKA,UAAU,aACb,wFACA,gDAGJ,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cAAf,aACA,yBAAKA,UAAU,aACb,+EACA,0DAGJ,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cAAf,cACA,uBACE8E,IAAI,MACJjE,KAAK,6DAFP,QAQF,yBAAKb,UAAU,YACb,yBAAKA,UAAU,cACb,yCAEF,yBAAKA,UAAU,aACb,uBACE8E,IAAI,MACJjE,KAAK,wDAFP,QAMA,qFAGJ,yBAAKb,UAAU,YACb,yBAAKA,UAAU,cACb,4CAEF,yBAAKA,UAAU,aACb,uBACE8E,IAAI,MACJjE,KAAK,wDAFP,WAMA,yFC/BGkE,EApBA,WACb,OACE,yBAAK/E,UAAU,UACb,yBAAKA,UAAU,YAAf,6BACA,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAASgF,OAAK,EAACC,GAAG,KAAlB,QAGA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,SAAlB,UAIA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,UAAlB,YCJOC,EAXA,WACb,OACE,yBAAKlF,UAAU,UACb,yDAEE,uCAAc,IAAImF,MAAOC,kB,MCsBlBC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKrF,UAAU,gBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAOgF,OAAK,EAACM,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACM,KAAK,QAAQC,UAAWZ,IACrC,kBAAC,IAAD,CAAOK,OAAK,EAACM,KAAK,SAASC,UAAWC,IACtC,kBAAC,IAAD,CAAOR,OAAK,EAACM,KAAK,SAASC,UAAWV,KAExC,kBAAC,EAAD,S,uBCrBFY,EAAe,CACnBvE,UAAW,GACXwE,SAAS,EACTrC,MAAO,IA+BMlC,EA7BK,WAAmC,IAAlCF,EAAiC,uDAAzBwE,EAAcE,EAAW,uCACpD,OAAQA,EAAO5C,MACb,KAAKjB,EACH,OAAO,eACFb,EADL,CAEEyE,SAAS,EACTrC,MAAO,OAEX,KAAKvB,EAEH,OAAO,eACFb,EADL,CAEEyE,SAAS,EACTxE,UAAWyE,EAAO3C,QAAQ9B,YAE9B,KAAKY,EAEH,OADAhC,QAAQC,IAAI,qCAAsC4F,EAAO3C,QAAQK,OAC1D,eACFpC,EADL,CAEEyE,SAAS,EACTrC,MAAOsC,EAAO3C,QAAQK,MAAMuC,QAC5B1E,UAAW,KAEf,QACE,OAAOD,IC7BPwE,EAAe,CACnBrB,WAAY,GACZsB,SAAS,EACTrC,MAAO,IAiCMgB,EA/BU,WAAmC,IAAlCpD,EAAiC,uDAAzBwE,EAAcE,EAAW,uCACzD,OAAQA,EAAO5C,MACb,KAAKlB,EACH,OAAO,eACFZ,EADL,CAEEyE,SAAS,EACTrC,MAAO,OAEX,KAAKxB,EACH,OAAO,eACFZ,EADL,CAEEyE,SAAS,EACTtB,WAAYuB,EAAO3C,QAAQR,OAE/B,KAAKX,EAKH,OAJA/B,QAAQC,IACN,yCACA4F,EAAO3C,QAAQK,OAEV,eACFpC,EADL,CAEEyE,SAAS,EACTrC,MAAOsC,EAAO3C,QAAQK,MAAMuC,QAC5BxB,WAAY,KAEhB,QACE,OAAOnD,ICxBE4E,EALKC,YAAgB,CAClC3E,cACAkD,qBCAa0B,EAFDC,YAAYH,EAAaI,YAAgBC,MCGvDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,W","file":"static/js/main.a465c45c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst PostCard = (props) => {\n  const { post, activePost } = props;\n\n  // const data = post.data;\n  // console.log(\" ::post.preview  : \", img);\n  console.log(\" :: Post : \", post);\n  // && post.preview.images && post.preview.images[0] && post.preview.images[0].resolutions[0]\n\n  const onClickHandler = () => {\n    props.onSelection(post);\n  };\n\n  return (\n    <div\n      className={activePost.id === post.id ? \"postCard activeItem\" : \"postCard\"}\n      onClick={onClickHandler}\n    >\n      <div className=\"cardBody\">\n        <div className=\"detailsBlock\">\n          <div>\n            <label>ID : </label>\n            {post.id}\n          </div>\n          <div>\n            <label>Name : </label>\n            {post.name}\n          </div>\n          <div>\n            <label>Display name: </label>\n            {post.display_name}\n          </div>\n          <div>\n            <label>Author : </label>\n            {post.author}\n          </div>\n        </div>\n        <div className=\"imageBlock\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostCard;\n","import React, { useEffect, useState } from \"react\";\n\nconst PostDetails = (props) => {\n  const { post } = props;\n  const [isActive, setActive] = useState(false);\n  useEffect(() => {\n    setActive(post && post.id);\n  }, [post]);\n\n  return (\n    <div className={isActive ? \"postDetails\" : \"hide\"}>\n      <div className=\"detailHeader\">\n        <div className=\"postName\">{post.name}</div>\n      </div>\n      <div className=\"detailBody\">\n        <label>Title </label>\n        <div className=\"item\">{post.title}</div>\n        <label>Display name: </label>\n        <div className=\"item\">{post.display_name}</div>\n        <label>Author : </label>\n        <div className=\"item\">{post.author}</div>\n        <label>URL </label>\n        <div className=\"item urlBlock\">\n          <a href=\"post.url\">{post.url}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostDetails;\n","import React, { useState } from \"react\";\n\nimport { connect } from \"react-redux\";\n// import { postActions } from \"../../redux/actions\";\nimport PostCard from \"./PostCard\";\nimport PostDetails from \"./PostDetails\";\n\nimport \"./css/post.css\";\n\nconst PostList = (props) => {\n  const { postsData } = props;\n  const [selectedPost, setSelectedPost] = useState({});\n\n  const onSelectHandler = (thisPost) => {\n    thisPost && setSelectedPost(thisPost);\n  };\n  return (\n    <div className=\"postList\">\n      <div className=\"scrollArea\">\n        {postsData &&\n          postsData.length > 0 &&\n          postsData.map((p, i) => (\n            <PostCard\n              key={i}\n              post={p}\n              onSelection={(tPost) => onSelectHandler(tPost)}\n              activePost={selectedPost}\n            />\n          ))}\n      </div>\n\n      <PostDetails post={selectedPost} activePost={selectedPost} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    postsData: state.postReducer.postsData,\n  };\n};\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     getPosts: () => dispatch(postActions.getPosts()),\n//   };\n// };\n\nconst connectedPostList = connect(mapStateToProps)(PostList);\nexport default connectedPostList;\n","export const subredditConstants = {\n  FETCH_SUBREDDIT_BEGIN: \"FETCH_SUBREDDIT_BEGIN\",\n  FETCH_SUBREDDIT_SUCCESS: \"FETCH_SUBREDDIT_SUCCESS\",\n  FETCH_SUBREDDIT_FAILURE: \"FETCH_SUBREDDIT_FAILURE\",\n};\n","export const postConstants = {\n  FETCH_POSTS_BEGIN: \"FETCH_POSTS_BEGIN\",\n  FETCH_POSTS_SUCCESS: \"FETCH_POSTS_SUCCESS\",\n  FETCH_POSTS_FAILURE: \"FETCH_POSTS_FAILURE\",\n};\n","import axios from \"axios\";\n// const BASE_URL = \"https://www.reddit.com/subreddits/popular.json?raw_json=1\";\n\nfunction getPosts(category) {\n  let pUrl = `https://www.reddit.com${category.url}hot.json`;\n  return axios.get(pUrl).then((response) => handleResponse(response));\n}\nfunction handleResponse(response) {\n  // console.log(\"handleResponse :: response \", response);\n  if (response.status !== 200) {\n    console.log(\"PostSerive :: API ERROR  \");\n  }\n  return response.data.data.children;\n}\n\nexport const postService = {\n  getPosts,\n};\n","import axios from \"axios\";\nconst BASE_URL = \"https://www.reddit.com/subreddits/popular.json?raw_json=1\";\n\nfunction getSubreddits() {\n  return axios.get(BASE_URL).then((response) => handleResponse(response));\n}\nfunction handleResponse(response) {\n  if (response.status !== 200) {\n    console.log(\"subredditService :: API ERROR  \");\n  }\n  return response.data.data.children;\n}\n\nexport const subredditService = {\n  getSubreddits,\n};\n\n//1. https://www.reddit.com/subreddits/popular.json?raw_json=1\n// 2. https://www.reddit.com/r/Minecraft/hot.json\n// 3.\n","import { subredditConstants } from \"../constants\";\nimport { subredditService } from \"../services\";\n\nconst fetchSubredditBegin = () => ({\n  type: subredditConstants.FETCH_SUBREDDIT_BEGIN,\n});\n\nconst fetchSubredditSuccess = (data) => ({\n  type: subredditConstants.FETCH_SUBREDDIT_SUCCESS,\n  payload: { data },\n});\n\nconst fetchSubredditFailure = (error) => ({\n  type: subredditConstants.FETCH_SUBREDDIT_FAILURE,\n  payload: { error },\n});\n\nconst formatSubredditData = (data) => {\n  return data.map((d) => {\n    let dObject = {};\n    dObject.id = d.data.id;\n    dObject.title = d.data.title;\n    dObject.url = d.data.url;\n    return dObject;\n  });\n};\n\nfunction getSubreddits() {\n  return (dispatch) => {\n    dispatch(fetchSubredditBegin());\n    subredditService.getSubreddits().then(\n      (data) => {\n        dispatch(fetchSubredditSuccess(formatSubredditData(data)));\n      },\n      (error) => dispatch(fetchSubredditFailure(error))\n    );\n  };\n}\n\nexport const subredditActions = {\n  getSubreddits,\n};\n","import { postConstants } from \"../constants\";\nimport { postService } from \"../services\";\n\nconst fetchPostsBegin = () => ({\n  type: postConstants.FETCH_POSTS_BEGIN,\n});\n\nconst fetchPostsSuccess = (postsData) => ({\n  type: postConstants.FETCH_POSTS_SUCCESS,\n  payload: { postsData },\n});\n\nconst fetchPostsFailure = (error) => ({\n  type: postConstants.FETCH_POSTS_FAILURE,\n  payload: { error },\n});\nconst formatPostData = (data) => {\n  // console.log(\"formatPostData :: : \", data);\n  return data.map((d) => {\n    let dObject = {};\n    dObject.id = d.data.id;\n    dObject.name = d.data.name;\n    dObject.title = d.data.title;\n    dObject.author = d.data.author;\n    dObject.author_fullname = d.data.author_fullname;\n    dObject.selftext = d.data.selftext; //Big text\n    dObject.url = d.data.url;\n\n    let imageUrl =\n      d.data.preview &&\n      d.data.preview &&\n      d.data.preview.images &&\n      d.data.preview.images[0] &&\n      d.data.preview.images[0].resolutions[0] &&\n      d.data.preview.images[0].resolutions[0].url\n        ? d.data.preview.images[0].resolutions[0].url\n        : \"\";\n\n    dObject.imageUrl = imageUrl;\n    dObject.domain = d.data.domain;\n\n    return dObject;\n  });\n  // return data;\n};\n\nfunction getPosts(category) {\n  return (dispatch) => {\n    dispatch(fetchPostsBegin());\n    postService.getPosts(category).then(\n      (data) => dispatch(fetchPostsSuccess(formatPostData(data))),\n      (error) => dispatch(fetchPostsFailure(error))\n    );\n  };\n}\n\nexport const postActions = {\n  getPosts,\n};\n","import React from \"react\";\nimport { postActions } from \"../../redux/actions\";\n\nimport { connect } from \"react-redux\";\nconst SubRedditItem = (props) => {\n  const { category, getPosts, onSelection, activeCategory } = props;\n  const onClickHandler = () => {\n    getPosts(category);\n    // setSelectedItemID(category.id);\n    onSelection(category);\n  };\n  //  <div className=\"subRedditItem\">\n  return (\n    <div\n      className={\n        activeCategory.id === category.id\n          ? \"subRedditItem activeItem\"\n          : \"subRedditItem\"\n      }\n    >\n      <div className=\"linkButton\" onClick={onClickHandler}>\n        {category.title}\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getPosts: (category) => dispatch(postActions.getPosts(category)),\n  };\n};\n\nconst connectedSubRedditItem = connect(null, mapDispatchToProps)(SubRedditItem);\nexport default connectedSubRedditItem;\n","import React, { useState, useEffect } from \"react\";\n// import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { subredditActions } from \"../../redux/actions\";\nimport SubredditItem from \"./SubredditItem\";\n\nimport \"./css/Subreddit.css\";\n\nconst SubredditList = (props) => {\n  const { getSubreddits, categories } = props;\n  const [selectedCategory, setSelectedCategory] = useState({});\n  const onSelectHandler = (thisCategory) => {\n    setSelectedCategory(thisCategory);\n  };\n  useEffect(() => {\n    getSubreddits();\n  }, [getSubreddits]);\n  return (\n    <div className=\"subRedditList\">\n      <div className=\"scrollArea\">\n        {categories &&\n          categories.length > 0 &&\n          categories.map((c, i) => (\n            <SubredditItem\n              key={i}\n              category={c}\n              activeCategory={selectedCategory}\n              onSelection={(tCat) => onSelectHandler(tCat)}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    categories: state.subredditReducer.categories,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getSubreddits: () => dispatch(subredditActions.getSubreddits()),\n  };\n};\n\nconst connectedSubredditList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SubredditList);\nexport default connectedSubredditList;\n\n// export default SubRedditList;\n","import React from \"react\";\n\nimport SubredditList from \"../../subreddits/SubredditList\";\nimport PostList from \"../../posts/PostList\";\nimport \"../css/common.css\";\nconst ViewContainer = () => {\n  // const [selectedCategory, setSelectedCategory] = useState({});\n  // const onSelectHandler = (thisCategory) => {\n  //   console.log(\n  //     \"ViewContainer ::onSelectHandler thisCategory : \",\n  //     thisCategory\n  //   );\n  //   setSelectedCategory(thisCategory);\n  // };\n  return (\n    <div className=\"viewContainer\">\n      <SubredditList />\n      <PostList />\n    </div>\n  );\n};\n\nexport default ViewContainer;\n","import React from \"react\";\n\nconst Home = (props) => {\n  return (\n    <div className=\"home\">\n      <h3>Service Channel - Home</h3>\n      <p>\n        Single Page Application build on ReactJS, Redux, React-Redux,\n        Redux-Thunk, Axios, gh-pages, HTML, CSS, SASS\n      </p>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./css/about.css\";\nconst About = (props) => {\n  return (\n    <div className=\"about\">\n      <div className=\"documentation\">\n        <div className=\"documentHeader\">About Project</div>\n        <div className=\"topicRow\">\n          <div className=\"topicLabel\">Tools & Technologies</div>\n          <div className=\"topicDesc\">\n            <p>ReactJS, Redux, React-Redux, Redux-Thunk, Axios, gh-pages</p>\n            <p>HTML, CSS, SASS</p>\n          </div>\n        </div>\n        <div className=\"topicRow\">\n          <div className=\"topicLabel\">React App</div>\n          <div className=\"topicDesc\">\n            <p>SPA(Single Page Application) with React-router, </p>\n            <p>Project - Service Channel</p>\n          </div>\n        </div>\n        <div className=\"topicRow\">\n          <div className=\"topicLabel\">Reddit API</div>\n          <a\n            alt=\"git\"\n            href=\"https://www.reddit.com/subreddits/popular.json?raw_json=1\"\n          >\n            API\n          </a>\n        </div>\n\n        <div className=\"topicRow\">\n          <div className=\"topicLabel\">\n            <p>Live Demo</p>\n          </div>\n          <div className=\"topicDesc\">\n            <a\n              alt=\"git\"\n              href=\"https://sijujacobs.github.io/serviceChannel-Project/\"\n            >\n              Demo\n            </a>\n            <p>https://sijujacobs.github.io/serviceChannel-Project/</p>\n          </div>\n        </div>\n        <div className=\"topicRow\">\n          <div className=\"topicLabel\">\n            <p>Source Code </p>\n          </div>\n          <div className=\"topicDesc\">\n            <a\n              alt=\"git\"\n              href=\"https://github.com/sijujacobs/serviceChannel-Project\"\n            >\n              Project\n            </a>\n            <p>https://github.com/sijujacobs/serviceChannel-Project</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\n\nimport { NavLink } from \"react-router-dom\";\n\nimport \"../css/common.css\";\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"appTitle\">Service Channel - Project</div>\n      <div className=\"navBar\">\n        <NavLink exact to=\"/\">\n          Home\n        </NavLink>\n        <NavLink exact to=\"/view\">\n          Reddit\n        </NavLink>\n\n        <NavLink exact to=\"/about\">\n          About\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <div>\n        Service Channel - Project\n        <span>&#169; {new Date().getFullYear()}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport { Route } from \"react-router-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport PostList from \"./components/posts/PostList\";\nimport ViewContainer from \"./components/common/viewContainer/ViewContainer\";\nimport Home from \"./components/home/Home\";\nimport About from \"./components/about/About\";\nimport Header from \"./components/common/header/Header\";\nimport Footer from \"./components/common/footer/Footer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"appContainer\">\n        <Header />\n        <div className=\"bodyContent\">\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/view\" component={ViewContainer} />\n          <Route exact path=\"/posts\" component={PostList} />\n          <Route exact path=\"/about\" component={About} />\n        </div>\n        <Footer />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { postConstants } from \"../constants\";\n\nconst initialState = {\n  postsData: [],\n  loading: false,\n  error: {},\n};\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case postConstants.FETCH_POSTS_BEGIN:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case postConstants.FETCH_POSTS_SUCCESS:\n      // console.log(\" FETCH_POSTS_SUCCESS :: payload : \", action.payload);\n      return {\n        ...state,\n        loading: false,\n        postsData: action.payload.postsData,\n      };\n    case postConstants.FETCH_POSTS_FAILURE:\n      console.log(\" FETCH_POSTS_FAILURE :: payload : \", action.payload.error);\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error.message,\n        postsData: [],\n      };\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default postReducer;\n","import { subredditConstants } from \"../constants\";\n\nconst initialState = {\n  categories: [],\n  loading: false,\n  error: {},\n};\nconst subredditReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case subredditConstants.FETCH_SUBREDDIT_BEGIN:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case subredditConstants.FETCH_SUBREDDIT_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        categories: action.payload.data,\n      };\n    case subredditConstants.FETCH_SUBREDDIT_FAILURE:\n      console.log(\n        \" FETCH_SUBREDDIT_FAILURE :: payload : \",\n        action.payload.error\n      );\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error.message,\n        categories: [],\n      };\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default subredditReducer;\n","import { combineReducers } from \"redux\";\nimport postReducer from \"./postReducer\";\nimport subredditReducer from \"./subredditReducer\";\n\nconst rootReducer = combineReducers({\n  postReducer,\n  subredditReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}