{"version":3,"sources":["redux/constants/post.constants.js","redux/services/post.service.js","redux/actions/post.actions.js","components/posts/PostCard.jsx","components/posts/PostDetails.jsx","components/posts/PostList.jsx","components/common/header/Header.jsx","components/common/footer/Footer.jsx","App.js","redux/reducers/postReducer.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["postConstants","postService","getPosts","console","log","axios","get","then","response","status","data","children","handleResponse","postActions","dispatch","type","payload","postsData","error","fetchPostsFailure","PostCard","props","post","className","onClick","onSelection","id","name","banner_background_image","src","alt","height","width","PostDetails","connectedPostList","connect","state","postReducer","useState","selectedPost","setSelectedPost","useEffect","length","map","p","i","key","tPost","thisPost","Header","Footer","Date","getFullYear","App","initialState","loading","action","message","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc998624.chunk.js","sourcesContent":["export const postConstants = {\n  FETCH_POSTS_BEGIN: \"FETCH_POSTS_BEGIN\",\n  FETCH_POSTS_SUCCESS: \"FETCH_POSTS_SUCCESS\",\n  FETCH_POSTS_FAILURE: \"FETCH_POSTS_FAILURE\",\n};\n","import axios from \"axios\";\nconst BASE_URL = \"https://www.reddit.com/subreddits/popular.json?raw_json=1\";\n\nfunction getPosts() {\n  console.log(\"PostSerive ::getPost : \");\n  return axios.get(BASE_URL).then((response) => handleResponse(response));\n}\nfunction handleResponse(response) {\n  // console.log(\"handleResponse :: response \", response);\n  if (response.status !== 200) {\n    console.log(\"PostSerive :: API ERROR  \");\n  }\n  return response.data.data.children;\n}\n\nexport const postService = {\n  getPosts,\n};\n","import { postConstants } from \"../constants\";\nimport { postService } from \"../services\";\n\nconst fetchPostsBegin = () => ({\n  type: postConstants.FETCH_POSTS_BEGIN,\n});\n\nconst fetchPostsSuccess = (postsData) => ({\n  type: postConstants.FETCH_POSTS_SUCCESS,\n  payload: { postsData },\n});\n\nconst fetchPostsFailure = (error) => ({\n  type: postConstants.FETCH_POSTS_FAILURE,\n  payload: { error },\n});\n\nfunction getPosts() {\n  return (dispatch) => {\n    dispatch(fetchPostsBegin());\n    postService.getPosts().then(\n      (data) => dispatch(fetchPostsSuccess(data)),\n      (error) => dispatch(fetchPostsFailure(error))\n    );\n  };\n}\n\nexport const postActions = {\n  getPosts,\n};\n","import React from \"react\";\n\nconst PostCard = (props) => {\n  // const { data } = props.post;\n  const { post } = props;\n  const data = post.data;\n\n  return (\n    <div className=\"postCard\" onClick={() => props.onSelection(data)}>\n      <div className=\"cardHeader\"></div>\n      <div className=\"cardBody\">\n        <div>\n          <label>ID : </label>\n          {data.id}\n        </div>\n        <div>\n          <label>Name : </label>\n          {data.name}\n        </div>\n\n        <img\n          className={data.banner_background_image ? \"postImg\" : \"hide\"}\n          src={data.banner_background_image}\n          alt=\"post bg\"\n          height=\"142\"\n          width=\"142\"\n        ></img>\n      </div>\n    </div>\n  );\n};\n\nexport default PostCard;\n","import React from \"react\";\n\nconst PostDetails = (props) => {\n  const { post } = props;\n  console.log(\"PostDetails :: props : \", post);\n  return (\n    <div className=\"postDetails\">\n      <div className=\"detailHeader\"></div>\n      <div className=\"detailBody\">\n        <div className=\"postLabel\">\n          <label>ID : </label>\n          {post.id}\n        </div>\n        <div className=\"postLabel\">\n          <label>Name : </label>\n          {post.name}\n        </div>\n\n        <img\n          className=\"postImg\"\n          src={post.banner_background_image}\n          alt=\"post bg\"\n          height=\"142\"\n          width=\"142\"\n        ></img>\n      </div>\n    </div>\n  );\n};\n\nexport default PostDetails;\n","import React, { useEffect, useState } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { postActions } from \"../../redux/actions\";\nimport PostCard from \"./PostCard\";\nimport PostDetails from \"./PostDetails\";\n\nimport \"./css/post.css\";\n\nconst PostList = (props) => {\n  const { getPosts, postsData } = props;\n\n  const [selectedPost, setSelectedPost] = useState({});\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  const onSelectHandler = (thisPost) => {\n    console.log(\"PostList ::onSelectHandler thisPost : \", thisPost);\n    setSelectedPost(thisPost);\n  };\n  return (\n    <div className=\"postList\">\n      <div className=\"scrollArea\">\n        {postsData &&\n          postsData.length > 0 &&\n          postsData.map((p, i) => (\n            <PostCard\n              key={i}\n              post={p}\n              onSelection={(tPost) => onSelectHandler(tPost)}\n            />\n          ))}\n      </div>\n      <div className=\"postDetailWrapper\">\n        <PostDetails post={selectedPost} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    postsData: state.postReducer.postsData,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getPosts: () => dispatch(postActions.getPosts()),\n  };\n};\n\nconst connectedPostList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostList);\nexport default connectedPostList;\n","import React from \"react\";\nimport \"../css/common.css\";\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"title\">Service Channel - Project</div>\n      <div className=\"desc\">List of Post and its details</div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <div>\n        Service Channel - Project\n        <span>&#169; {new Date().getFullYear()}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport { HashRouter } from \"react-router-dom\";\nimport PostList from \"./components/posts/PostList\";\nimport Header from \"./components/common/header/Header\";\nimport Footer from \"./components/common/footer/Footer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"appContainer\">\n        <Header />\n        <PostList />\n        <Footer />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { postConstants } from \"../constants\";\n\nconst initialState = {\n  postsData: [],\n  loading: false,\n  error: {},\n};\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case postConstants.FETCH_POSTS_BEGIN:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case postConstants.FETCH_POSTS_SUCCESS:\n      console.log(\" FETCH_POSTS_SUCCESS :: payload : \", action.payload);\n      return {\n        ...state,\n        loading: false,\n        postsData: action.payload.postsData,\n      };\n    case postConstants.FETCH_POSTS_FAILURE:\n      console.log(\" FETCH_POSTS_FAILURE :: payload : \", action.payload.error);\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error.message,\n        postsData: [],\n      };\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default postReducer;\n","import { combineReducers } from \"redux\";\nimport postReducer from \"./postReducer\";\n\nconst rootReducer = combineReducers({\n  postReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}